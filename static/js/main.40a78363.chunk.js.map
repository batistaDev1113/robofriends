{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","searchField","searchChange","className","type","placeholder","onChange","Card","name","email","id","src","alt","CardList","robots","cardsArray","map","user","index","StrictMode","Scroll","props","style","overflowY","border","height","padding","children","App","onSearchChange","event","setState","target","value","state","fetch","then","res","json","users","this","filteredRobots","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"6OAeeA,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aACjC,OACC,qBAAKC,UAAU,MAAf,SACC,uBACCA,UAAU,mCACVC,KAAK,SACLC,YAAY,gBACZC,SAAUJ,OCKCK,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC5B,OACC,sBAAKP,UAAU,sDAAf,UACC,qBAAKQ,IAAG,+BAA0BD,EAA1B,YAAwCE,IAAI,KACpD,gCACC,6BAAKJ,IACL,4BAAIC,WCIOI,EATE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACbC,EAAaD,EAAOE,KAAI,SAACC,EAAMC,GACpC,OACC,cAAC,EAAD,CAAMV,KAAMM,EAAOI,GAAOV,KAAMC,MAAOK,EAAOI,GAAOT,MAAOC,GAAII,EAAOI,GAAOR,IAASI,EAAOI,GAAOR,OAGvG,OAAO,cAAC,IAAMS,WAAP,UAAmBJ,KCCZK,G,MARA,SAACC,GACf,OACC,qBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,iBAAkBC,OAAQ,QAASC,QAAS,QAAvF,SACEL,EAAMM,aCqCKC,E,kDAnCd,aAAe,IAAD,8BACb,gBAaDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAAE9B,YAAa6B,EAAME,OAAOC,SAb1C,EAAKC,MAAQ,CACZpB,OAAc,GACdb,YAAc,IAJF,E,gEAQO,IAAD,OACnBkC,MAAM,8CACJC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAW,EAAKR,SAAS,CAAEjB,OAAQyB,S,+BAOjC,IAAD,EACwBC,KAAKN,MAA7BpB,EADA,EACAA,OAAQb,EADR,EACQA,YACVwC,EAAiB3B,EAAO4B,QAAO,SAAC5B,GACrC,OAAOA,EAAON,KAAKmC,cAAcC,SAAS3C,EAAY0C,kBAEvD,OACC,sBAAKxC,UAAU,KAAf,UACC,6CACA,cAAC,EAAD,CAAWD,aAAcsC,KAAKX,iBAC9B,cAAC,EAAD,UACC,cAAC,EAAD,CAAUf,OAAQ2B,a,GA7BLI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDX,M","file":"static/js/main.40a78363.chunk.js","sourcesContent":["import React from 'react';\n\nconst SearchBox = ({ searchField, searchChange }) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\t\ttype='search'\n\t\t\t\tplaceholder='search robots'\n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n\treturn (\n\t\t<div className='bg-light-green dib br1 pa1 ma2 grow bw1 tc shadow-5'>\n\t\t\t<img src={`https://robohash.org/${id}?200x200`} alt='' />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\tconst cardsArray = robots.map((user, index) => {\n\t\treturn (\n\t\t\t<Card name={robots[index].name} email={robots[index].email} id={robots[index].id} key={robots[index].id} />\n\t\t);\n\t});\n\treturn <React.StrictMode>{cardsArray}</React.StrictMode>;\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{ overflowY: 'scroll', border: '1px solid #000', height: '700px', padding: '10px' }}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\nimport SearchBox from './components/SearchBox';\nimport CardList from './components/CardList';\nimport './App.css';\nimport Scroll from './components/Scroll';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\trobots      : [],\n\t\t\tsearchField : ''\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then((res) => res.json())\n\t\t\t.then((users) => this.setState({ robots: users }));\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchField: event.target.value });\n\t};\n\n\trender() {\n\t\tconst { robots, searchField } = this.state;\n\t\tconst filteredRobots = robots.filter((robots) => {\n\t\t\treturn robots.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t});\n\t\treturn (\n\t\t\t<div className='tc'>\n\t\t\t\t<h1>Robofriends</h1>\n\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\n\t\t\t\t<Scroll>\n\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}